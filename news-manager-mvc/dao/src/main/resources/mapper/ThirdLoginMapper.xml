<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xioa.dao.ThirdLoginMapper">
  <resultMap id="BaseResultMap" type="com.xioa.model.ThirdLogin">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="type" jdbcType="INTEGER" property="type" />
    <result column="type_name" jdbcType="VARCHAR" property="typeName" />
    <result column="token" jdbcType="VARCHAR" property="token" />
  </resultMap>
  <sql id="Base_Column_List">
    id, type, type_name, token
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from third_login
    where id = #{id,jdbcType=INTEGER}
  </select>

  <select id="findThirdLoginAll" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List" />
    from third_login

  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from third_login
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.xioa.model.ThirdLogin">
    insert into third_login (id, type, type_name, 
      token)
    values (#{id,jdbcType=INTEGER}, #{type,jdbcType=INTEGER}, #{typeName,jdbcType=VARCHAR}, 
      #{token,jdbcType=VARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.xioa.model.ThirdLogin">
    insert into third_login
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="type != null">
        type,
      </if>
      <if test="typeName != null">
        type_name,
      </if>
      <if test="token != null">
        token,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="type != null">
        #{type,jdbcType=INTEGER},
      </if>
      <if test="typeName != null">
        #{typeName,jdbcType=VARCHAR},
      </if>
      <if test="token != null">
        #{token,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.xioa.model.ThirdLogin">
    update third_login
    <set>
      <if test="type != null">
        type = #{type,jdbcType=INTEGER},
      </if>
      <if test="typeName != null">
        type_name = #{typeName,jdbcType=VARCHAR},
      </if>
      <if test="token != null">
        token = #{token,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.xioa.model.ThirdLogin">
    update third_login
    set type = #{type,jdbcType=INTEGER},
      type_name = #{typeName,jdbcType=VARCHAR},
      token = #{token,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <sql id="OracleDialectPrefix">
    <if test="page != null">
      select * from ( select row_.*, rownum rownum_ from ( 
    </if>
  </sql>
  <sql id="OracleDialectSuffix">
    <if test="page != null">
      <![CDATA[ ) row_ ) where rownum_ > #{page.begin} and rownum_ <= #{page.end} ]]>
    </if>
  </sql>
  <select id="selectByPagination" resultMap="BaseResultMap">
    <include refid="OracleDialectPrefix" />
    select
    <include refid="Base_Column_List" />
    from third_login
    <include refid="OracleDialectSuffix" />
  </select>
</mapper>